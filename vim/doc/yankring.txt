*yankring.txt*      For Vim version 7.0. 

Author:	        David Fishburn                             June 24, 2008
Version:        4.0

For instructions on installing this file, type
	:help add-local-help |add-local-help| inside Vim.
    

==============================================================================
1. Contents                                      *yankring* *yankring-contents*

    1. Contents...............................: |yankring-contents|
    2. Description............................: |yankring-description|
    3. Configuration..........................: |yankring-configure|
       3.1 Global Variables...................: |yankring-globals|
       3.2 Default Keys.......................: |yankring-mappings|
       3.3 Customizing Maps...................: |yankring-custom-maps|
    4. Using the YankRing Window..............: |yankring-window|
    5. Commands...............................: |yankring-commands|
       5.1  YRToggle..........................: |YRToggle|
       5.2  YRClear...........................: |YRClear|
       5.3  YRShow............................: |YRShow|
       5.5  YRGetElem.........................: |YRGetElem|
       5.6  YRGetMultiple.....................: |YRGetMultiple|
       5.7  YRPush............................: |YRPush|
       5.8  YRPop.............................: |YRPop|
       5.9  YRYankCount.......................: |YRYankCount|
       5.10 YRYankRange.......................: |YRYankRange|
       5.11 YRDeleteRange.....................: |YRDeleteRange|
       5.12 YRPaste...........................: |YRPaste|
       5.13 YRReplace.........................: |YRReplace|
       5.14 YRMapsCreate......................: |YRMapsCreate|
       5.15 YRMapsDelete......................: |YRMapsDelete|
       5.16 YRSearch..........................: |YRSearch|
       5.17 YRRunAfterMaps....................: |yankring-custom-maps|
    6. Tutorial...............................: |yankring-tutorial|
       6.1  YRShow............................: |YRShow-example|
       6.2  YRReplace.........................: |YRReplace-example|
       6.3  YRPush............................: |YRPush-example|
       6.4  YRClear...........................: |YRClear-example|
       6.8  YRPop.............................: |YRPop-example|
       6.9  Visual modes......................: |yankring-visual-example|
       6.10 Using ranges......................: |YRYankRange-example|
       6.11 :global...........................: |global-example|
       6.12 YRSearch..........................: |YRSearch-example|
    7. History................................: |yankring-history|

==============================================================================
2. Description                                   *yankring-description*

Vim already maintains a list of numbered registers containing the last 9
deletes.  These previous deletes can be referenced using [register]p, so 
"1p will paste the last delete, "2p the 2nd last delete.  For more
information see |quote_number|.

Vim does not provide any mechanism to reference previously yanked text.  
In Emacs this feature is called the "kill ring".

The yankring plugin allows the user to configure the number of yanked
and deleted text.  After text has been pasted, it can be replaced with
a previous value from the yankring.

As of version 3.0, the yankring's content will persist (by default) 
between starting and stopping Vim.

The plugin can be toggled on and off, and supports:
   Ranges
   Registers
   Counts
   All visual modes
   All motions
   All text-objects

If you have any suggestions for the improvement of this plugin, see the
yankring.vim file for my email address.  Suggestions / bug reports are
always welcome.

For details on the changes between versions see |yankring-history|.

==============================================================================
3. Configuration                                 *yankring-configure*

The yankring allows the user to choose which keys are to be assigned to
the various commands.  By default, the yankring chose keys identical
with Vim's standard behaviour/keys.  

3.1 Global Variables                             *yankring-globals*

You can customize the yankring by setting various global variables in
your |.vimrc|.
>
    yankring_max_history 
<       Default: 100
        Controls how many elements to save in the yankring. >
            let g:yankring_max_history = 100
    yankring_enabled
<       Default: 1
        If you do not want to yankring enabled by default, set this 
        variable in your |vimrc|. >
            let g:yankring_enabled = 0  " Disables the yankring
    yankring_separator  
<       Default: ,
        Used to parse yankring_n_keys. >
            let g:yankring_separator = ','
    yankring_max_display  
<       Default: 500
        When the yankring window is opened, each element is displayed on a
        separate line.  Since each yank could be very large, the display of
        the element is limited to the above default.  >
            let g:yankring_max_display = 70
    yankring_persist  
<       Default: 1
        If you have enabled the storing of global variables in the |viminfo|
        file, the yankring will be default persist the contents of the ring
        between starting and stopping Vim.  To disable this feature: >
            let g:yankring_persist = 0
    yankring_dot_repeat_yank
<       Default: Based on the Vim cpoption setting
        By default Vim will not repeat (using '.') yanking of text.  This can
        be controlled via the |'cpoptions'| setting.  The yankring now respects
        the cpoptions setting, if 'y' is included and you press '.', the
        previous yank command is repeated and added to the yankring.
        You can also add this behaviour by setting this in your |vimrc|: >
            let g:yankring_dot_repeat_yank = 1
    yankring_ignore_duplicate
<       Default: 1
        Duplicates will not be added to the yankring by default.  If a
        duplicate is found, that element will be moved to the top of the
        yankring.  This can be controlled by setting this in your |vimrc|: >
            let g:yankring_ignore_duplicate = 0 
    yankring_map_dot
<       Default: 1
        If the '.' (repeat) command should be mapped by the yankring.  Since
        most of the normal commands yy,dd,dw,... are mapped by the yankring,
        if g:yankring_map_dot is false the . operator will not repeat these
        operations.  The yankring tracks several of the internal Vim registers
        and decides whether an action was the result of the yankring or an
        action outside of it.  If the previous action was a result of the
        yankring, it will be executed again.  If it was an action outside of
        the yankring, it asks Vim to repeat the command. >
            let g:yankring_map_dot = 1
    yankring_paste_using_g
<       Default: 1
        By default [p] and [P] are mapped to interact with the yankring.  This
        option controls whether [gp] and [gP] are also mapped.  Setting this
        option to 0 will not create these maps.  >
            let g:yankring_paste_using_g = 1
    yankring_window_use_separate 
<       Default: 1
        This is a new feature as of the 2.0 release.  The yankring now uses a
        separate split buffer to display the yankring.  There are many buffer
        specific maps that allow you to operate over the various elements from
        within the yankring.  Setting this option to 0, uses the 1.0
        interface. >
            let g:yankring_window_use_separate = 0
    yankring_window_auto_close
<       Default: 1
        By default once you choose an option in the yankring buffer, the
        action is performed and the buffer window is closed, returning you to
        the original buffer.  This option can be toggled from within the
        yankring buffer by pressing [a].  The yankring buffer status line
        visually indicates where auto close is enabled or disabled.  There are
        many times where you need to paste (or delete) many items from the
        yankring.  Pressing [a], disables auto close, allows you to paste many
        items, and finally you can press [a] to re-enable auto close, followed
        by [q] to quit the buffer window. >
            let g:yankring_window_auto_close = 1
    yankring_window_use_horiz
<       Default: 1
        When the yankring window is opened, it uses a horizontal split at the
        bottom of the Vim window.  It can optionally use a vertical split by
        setting this option to 0.  >
            let g:yankring_window_use_horiz = 0  " Use vertical split
    yankring_window_height
<       Default: 1
        If using a horizontal split, this option controls how high to make
        the window.  >
            let g:yankring_window_height = 8
    yankring_window_width
<       Default: 1
        If using a vertical split, this option controls how wide to make the
        window.  >
            let g:yankring_window_width = 30
    yankring_window_use_bottom
<       Default: 1
        If using a horizontal split, this option control whether the window is
        opened at the top or bottom of the Vim window.  Setting this option to
        0 forces the window to open at the top of the Vim window.  >
            let g:yankring_window_use_bottom = 1
    yankring_window_use_right
<       Default: 1
        If using a vertical split, this option control whether the window is
        opened on the left or right side of the Vim window.  To force the
        window to open on the left side, set this option to 0.  >
            let g:yankring_window_use_right = 1
    yankring_window_increment
<       Default: 1
        If using a vertical split the default width of the vertical window may
        be too narrow to view enough of the elements.  Pressing [<space>] will
        increase the size of the window by this number of columns.  Pressing
        [<space>] again will toggle it back to the original size.  >
            let g:yankring_window_increment = 50
    yankring_manage_numbered_reg
<       Default: 0
        Vim already maintains a list of numbered registers containing the last
        yanked item and the previous 9 deletes.  These items can be referenced
        using [register]p, so "0p will paste the last yank, "1p will paste the
        last delete, "2p the 2nd last delete.  For more information see
        |quote_number|.
        If you wish the yankring to maintain these numbered registers so 
        the top 10 elements in the yankring are in the numbered reqisters 0-9
        you can put the following in your |vimrc| >
            let g:yankring_manage_numbered_reg = 1

<
3.2 Default Keys                                 *yankring-mappings*

You can choose to override the default keys by creating these global
variables in your |vimrc|.
>
    yankring_n_keys
<       n - normal mode
        Default: yy,dd,yw,dw,ye,de,yE,dE,yiw,diw,yaw,daw,
                 y$,d$,Y,D,yG,dG,ygg,dgg
        Yanks text in normal mode.    
        Using the yankring_separator, the above list is parsed and 
        individual mappings are created.  For each of the above normal 
        commands the yankring will include the text those commands 
        acted upon.   There are many ways to accomplish the same result 
        in Vim, if you do not see a common key stroke you regularly use
        simply add the following to your |vimrc| with the additional 
        keys you wished mapped.  >
        let g:yankring_n_keys = 'yy,dd,yw,dw,ye,de,yE,dE,yiw,diw,yaw,daw,y$,d$,Y,D,yG,dG,ygg,dgg'
    yankring_v_key
<       v - visual mode
        Default: y 
        Yanks visually select text.   >
    yankring_del_v_key
<       n - normal mode
        Default: d 
        The visually select text is included in the yankring and deleted. >
    yankring_paste_n_bkey
<       n - normal mode
        b - before
        Default: P
        The default Vim paste key will retrieve from the yankring.  This 
        will paste the text BEFORE the current position. 
        There is a special check to see if the text in the default paste
        register is the same as what is in the current position of the 
        yankring.  If it is not, we assume the user used some other 
        mechanism to yank text (ie yt<character>).  If this is the case
        we paste the text in the default paste buffer.  Using <C-P> the
        text can be replaced with the current entry from the yankring.
        Since there are many ways to do things in Vim, this provides
        the best integration. >
    yankring_paste_n_akey
<       n - normal mode
        a - after
        Default: p 
        The default Vim paste key will retrieve from the yankring.  This 
        will paste the text AFTER the current position. 
        There is a special check to see if the text in the default paste
        register is the same as what is in the current position of the 
        yankring.  If it is not, we assume the user used some other 
        mechanism to yank text (ie yt<character>).  If this is the case
        we paste the text in the default paste buffer.  Using <C-P> the
        text can be replaced with the current entry from the yankring.
        Since there are many ways to do things in Vim, this provides
        the best integration. >
    yankring_paste_v_key
<       n - normal mode
        Default: p
        This will replace the visually select text with the contents 
        from the yankring.   See yankring_paste_n_akey for additional
        details.  >
    yankring_replace_n_pkey
<       n - normal mode
        Default: <C-P>
        If you wish to cycle through the yankring, replacing the previously
        pasted text with the previous yanked text you can repeatedly press
        <C-P> (or whatever keystroke you choose to map it to).  This map
        moves backwards through the yankring, so you will retrieve your
        most recent yank.  >
    yankring_replace_n_nkey
<       n - normal mode
        Default: <C-N>
        If you wish to cycle through the yankring, replacing the previously
        pasted text with the previous yanked text you can repeatedly press
        <C-N> (or whatever keystroke you choose to map it to).  This map 
        moves forwards through the yankring, so you will retrieve your 
        oldest yank.  But it is also useful if you press <C-P> too many 
        times, you can cycle in the other direction if you passed the 
        text you wanted.

3.3 Customizing Maps                             *yankring-custom-maps*

The yankring plugin uses the yankring_n_keys global variable to create 
a number of defaults maps.  The maps are of the form: >
    nnoremap Y  :<C-U>YRYankCount 'Y'<CR>
<
When capital Y is pressed, the yankring will execute 'Y' and capture the
output from Vim.  But there are cases where you do not want the default
behaviour of Vim, since you have customized some of these maps.

In this case, I usually map Y to be |y$|, which makes it consistent with 
the |D| and |C| operators.  The way yankring_n_keys works does not allow
me to customize this behaviour.  Since many people may like to customize
the behaviour of these maps the yankring will check to see if a
function called YRRunAfterMaps() exists.  If it does, it will call 
this function after it has created the maps.  So in my case, I created
the following function in my |vimrc|: >
    function! YRRunAfterMaps()
        nnoremap Y   :<C-U>YRYankCount 'y$'<CR>
    endfunction
<
You can do anything you need in this function.  >
        nnoremap Y   :<C-U>YRYankCount 'y$'<CR>
<
This line remaps Y (which the user presses) to the YRYankCount command.  The
YRYankCount tells Vim to execute y$ instead.


==============================================================================
4. Using the YankRing Window:                    *yankring-window*

This is a new feature as of the 2.0 release.  The yankring uses a
separate split buffer to display the yankring.  There are many buffer
specific maps that allow you to operate over the various elements from
within the yankring.  

To display the yankring buffer you can issue the :YRShow command.  For
convience you can map a key, <F11>, to this command: >
	:nnoremap <silent> <F11> :YRShow<CR>

Status line~
The first line in the yankring window is the status line. >
    AutoClose=1;Cmds:p,P,d,r,a,u,q,<enter>,<space>;Help=?
<
Help=?, pressing [?] will toggle the display of available commands the
yankring window supports.  Pressing [?] again will remove the additional
items.  

AutoClose=1 indicates the window will close when an action is performed
against elements within the yankring.  If you wish to perform multiple
yankring operations press [a] to toggle the auto close feature off.  Use the
commands below and when finished you can press [a] to toggle auto close on and
press [q] to close the window.  The Cmds displayed are simply reminders of 
the available keys.

YankRing window key list~
The following table lists the description of the keys that can be used
in the yankring window.

  Key           Description~
  p             Puts text after the cursor.  In visual mode, all elements
                selected will be pasted.
  P             Puts text before the cursor.  In visual mode, all elements
                selected will be pasted.
  gp            Just like "p", but leave the cursor just after the new text.
  gP            Just like "P", but leave the cursor just after the new text.
  <CR>          Just like "p".
  <2-LeftMouse> Just like "p".  Normal mode only.
  r             Just like "p", but in visual mode if many lines are selected
                it will paste these in reverse order.
  d             Removes the element from the yankring.  In visual mode all
                elements selected will be removed.
  <Space>       Toggles the width of the vertical window by the
                g:yankring_window_increment setting.
  a             Toggles the g:yankring_window_auto_close setting.
  u             Updates the yankring window.
  q             Closes the yankring window.
  ?             Toggles the display of the help.

 


==============================================================================
5. Commands:                                     *yankring-commands*

The predefined mappings call some specific commands with special parameters.
If you are going to create additional maps, it is important you mirror
the same parameters.  Most of these commands have been made obsolete by 
the yankring window, since it incorporates the functionality below, but
through maps against a buffer, instead of commands.  This makes it much easier
to use.


5.1  YRToggle                                    *YRToggle*
         Allows you to enable and disable the yankring quickly.  This 
         command will remove the default maps and recreate them.

         Examples: >
            :YRToggle    " Toggles it
            :YRToggle 1  " Enables it
            :YRToggle 0  " Disables it
<            

5.2  YRClear                                     *YRClear*
         Clears all elements from the yankring.
         See also |YRClear-example|.


5.3  YRShow                                      *YRShow*
         Similar to |:register|, will display all the entries in the yankring.
         The element at the top will be the next element pasted from the
         yankring.

         Examples:  >
            :YRShow     " Shows all entries in the yankring

            --- YankRing ---
            Elem  Content
            1     five^@
            2     four^@
            3     three^@
            4     two^@
            5     one^@
<    

5.5  YRGetElem                                   *YRGetElem*
        This command has two modes.  If no parameters are provided, it 
        becomes interactive.  It uses YRShow to display the list and 
        allows you to choose which element to paste.  If a parameter
        is supplied it will paste that element from the yankring.  If the
        number specified is outside of the yankring an error is returned.
        You may want to create a separate mapping for this call. >
            nnoremap <silent> <Leader>yr :YRGetElem<CR>
<       See also |YRSearch|.
 
        Examples:
            Assume there are 10 elements in the yankring and element 6 is 
            at the top of the ring. >
            :YRGetElem     " Interactive mode, you choose from a list
            :YRGetElem 4   " Will paste element 5.
            :YRGetElem 12  " Will paste element 6.
            :YRGetElem 99  " Error, invalid choice is reported
            :YRGetElem 0   " Error, invalid choice is reported
 

5.6  YRGetMultiple                               *YRGetMultiple*
        Will paste many elements from the yankring in one command.
        If the number specified is less than 1, it is assumed you want
        just the current element pasted.  If the number specified is 
        greater than the number of elements in the yankring, it is 
        assumed you want all elements pasted.  See the 
        |yankring-tutorial| for more examples.

        Examples:
            Assume there are 10 elements in the yankring and element 6 is 
            at the top of the ring. >
            :YRGetMultiple 4   " Will paste elements 6,5,4,3
            :YRGetMultiple     " Will paste element  6
            :YRGetMultiple 12  " Will paste elements 6,5,4,3,2,1,10,9,8,7
            :YRGetMultiple 99  " Will paste elements 6,5,4,3,2,1,10,9,8,7
            :YRGetMultiple 0   " Will paste element  6
<           See also |YRGetMultiple-example|.
 

5.7  YRPush                                      *YRPush*
         Allows the user to "push" additional entries into the yankring.
         If you yanked text via a key mapping which does not use the 
         yankring (or there is text on the clipboard) you can use this
         command to add the text to the yankring.

         Examples: >
            :YRPush      " Push the "  register's contents 
            :YRPush '*'  " Push the "* register's contents (clipboard)
            :YRPush 'a'  " Push the "a register's contents 
<           See also |YRPush-example|.
             

5.8  YRPop                                       *YRPop*
         Allows you to pop any elements from the yankring.  If no parameters
         are provided, the 1st element is removed from the yankring.  The
         command optionally takes a second parameter to specify how many
         elements to pop.  The default value is 1.

         Examples: >
            :YRPop      " Removes the highest numbered element from the 
                          yankring
            :YRPop 3    " Removes the 3rd element from the yankring
            :YRPop 3,5  " Removes 5 elements from the yankring beginning
                          at element 3
<           See also |YRPop-example|.
             

5.9  YRYankCount                                 *YRYankCount*
         This command has the most mappings created for it.  If you are 
         in normal mode and you are not specifying a range, this command
         will add the text to the yankring.

         The goal of this command is to allow the yankring to be integrated
         as seamlessly as possible with Vim.  So it supports counts and 
         registers.  If you create a mapping to it, you must pass as a
         parameter the action you want Vim to perform.  You could do the 
         following: >
            nnoremap \test  :<C-U>YRYankCount 'dd'<CR>
<        This map is executed when you hit the '\test' keystrokes, but
         it will actually delete the current line and add it to the 
         yankring.

         The following are the default mappings: >
            nnoremap yy  :<C-U>YRYankCount 'yy'<CR>
            nnoremap dd  :<C-U>YRYankCount 'dd'<CR>
            nnoremap yw  :<C-U>YRYankCount 'yw'<CR>
            nnoremap dw  :<C-U>YRYankCount 'dw'<CR>
            nnoremap ye  :<C-U>YRYankCount 'ye'<CR>
            nnoremap de  :<C-U>YRYankCount 'de'<CR>
            nnoremap yiw :<C-U>YRYankCount 'yiw'<CR>
            nnoremap diw :<C-U>YRYankCount 'diw'<CR>
            nnoremap Y   :<C-U>YRYankCount 'Y'<CR>
            nnoremap D   :<C-U>YRYankCount 'D'<CR>
            nnoremap y$  :<C-U>YRYankCount 'y$'<CR>
            nnoremap d$  :<C-U>YRYankCount 'd$'<CR>
            nnoremap yG  :<C-U>YRYankCount 'yG'<CR>
            nnoremap dG  :<C-U>YRYankCount 'dG'<CR>
<
         Examples:
                yy - Adds the current line to the yankring.
                dd - Adds the current line to the yankring and deletes it.
               5yw - Adds 5 words to the yankring.
              "ade - Deletes the word, and puts it into both the yankring
                     and the "a register.
            10"zyy - Places 10 lines into both the yankring and the "z
                     register.
            See also |yankring-tutorial|.
         
         
5.10 YRYankRange                                 *YRYankRange*
         This command by default is only called in visual mode.  All
         visual modes (|characterwise-visual|, |linewise-visual|,
         |blockwise-visual|) are supported.  Any visually selected text
         is added to the yankring.  You can also call this command
         directly using a range.

         Examples:
            Visual mode
            -----------
            Press v (to enter visual mode), highlight want you want, 
            press y (to yank the selected area).
            Repeat using V and Control-V.
            
            Normal mode
            ----------- >
            :5,20YRYankRange   " Will yank lines 5-20 into the yankring
            :5,20YRDeleteRange " Will delete lines 5-20 and add them to
                                 the yankring
<           See also |YRYankRange-example|.
         
         
5.11 YRDeleteRange                               *YRDeleteRange*
         This command is identical to YRYankRange, except the range is
         also deleted.


5.12 YRPaste                                     *YRPaste*
        This command will paste elements from the yankring.  By default it has
        been mapped to p and P to match Vim's native key strokes.  The text
        pasted is exactly what was yanked, including newline characters and 
        blockwise-visual mode behaviours.  It supports counts and registers.

        Examples:
            p   " Paste the current element from the yankring after the cursor
            P   " Paste the current element from the yankring before the cursor
           5p   " Paste the current element from the yankring after the cursor
                  5 times
          "ap   " Ignore the yankring and paste the contents of register "a
         5"ap   " Ignore the yankring and paste the contents of register "a
                  5 times
            See also |yankring-tutorial|.

            
5.13 YRReplace                                   *YRReplace*
        The purpose of the yankring is to gain access to previously yanked
        (or deleted) elements.  This command will replace the previously 
        paste  with a different entry from the yankring.
        By default, I choose <C-P> (P for previous) to replace the last paste
        while moving backwards through the yankring.  <C-N> (N for next)
        replaces the last paste while moving forward through the yankring. 

        Examples:
            See the |yankring-tutorial| for examples.

            
5.14 YRMapsCreate                                *YRMapsCreate*
        This public function is responsible for creating the maps which
        enable the yankring.  This function is called by the YRToggle 
        command.

            
5.15 YRMapsDelete                                *YRMapsDelete*
        This public function removes the yankring maps and disables
        the yankring.  This function is called by the YRToggle command.

            
5.16 YRSearch                                    *YRSearch*
        This command is similar to |YRGetElem|.  The command takes
        one parameter which is a regular expression.  Similar to 
        YRGetElem, it will display all items in the yankring that match
        the regular expression.  It is also interactive, and will 
        prompt you to enter which match you wish pasted.
        See also |YRSearch-example|.


==============================================================================
6. Tutorial                                      *yankring-tutorial*

To understand how to use the yankring, the following example will
demonstrate the various features.  Assume you have created the following
mapping: >
    nnoremap <silent> <F11> :YRShow<CR>
<
    Assume we have this buffer: >
        one
        two
        three
        four
        five
<                                                *YRShow-example*     
     Now yank (yy) each line separately starting at line 1.
     Display the contents of the yankring by executing the command
     YRShow, or pressing <F11>.  The contents of the yankring is
     displayed in a new buffer.  The size, location and type of buffer
     is configurable via various options.  See section 3 for more details. >
        :YRShow or F11 
            --- YankRing ---
            Elem  Content
            1     five^@
            2     four^@
            3     three^@
            4     two^@
            5     one^@
<    Since we yanked the text starting at line 1 and finishing at
     line 5, the most current yankring element is the last one, the
     contents of line 5.  "five^@" is displayed, the "^@" is a 
     newline character (since we issued a "yy").
     
                                                 *yankring-window-example*     
     At this point, you have two options.  You can choose which element
     from the yankring you wish to paste and press <CR> or 'p' or 'P' 
     and a variety of other options, see |yankring-window|. After pressing
     the key, the yankring window will close (default behaviour).  Pressing
     '?' will display additional help for the commands that are active within
     the yankring window.  Pressing '?' will toggle the help.

     You do not need to interact with the yankring using the yankring window.
     Using the window makes many tasks must easier, but for speed using some
     of the other maps can be preferrable if you know what you have yanked /
     deleted recently.  It was designed to work with Vim in the usual manner.
     You can press, 'p', to paste the last item in yanked or deleted.

     Close the yankring window by pressing 'q' or F11 (which toggles it).

                                                 *YRReplace-example*     
     Now, go to the end of the file and press 'p'.  The resulting
     buffer appears as: >
        one
        two
        three
        four
        five
        five
<
     Assume you did not want 'five", but a different entry from within the
     yankring.  <C-P> moves backwards through the yankring, it will replace
     the previous pasted text with a different item from the yankring.  This
     allows you to quickly iterate through different elements.  <C-P> is the
     default mapping, this can be user defined. See the following options for
     more details: >
        yankring_replace_n_nkey, yankring_replace_n_pkey
<
     After pressing <C-P> the buffer results in: >
        one
        two
        three
        four
        five
        four
<    Now press 2<C-P>.  This would be the same as pressing 
     <C-P> two times in a row.  This results in: >
        one
        two
        three
        four
        five
        two
<    Now press <C-N> to move forwards through the yankring, 
     this results in: >
        one
        two
        three
        four
        five
        three
<    Display the contents of the yankring. >
        :YRShow  
            --- YankRing ---
            Elem  Content
            1     five^@
            2     four^@
            3     three^@
            4     two^@
            5     one^@
<
    Now lets yank some text with a key stroke that has not been 
    mapped to the yankring.  Place your cursor at the start of 
    line 4.  Press 'ytr', yank-to-(to the character r), which yanks
    the 'fou' letters (no newline character).  Now press p.  Here is
    the result: >
        one
        two
        three
        ffouour
        five
        three
<   This is good, even though the keys 'ytr' has not been mapped
    to YRYankCount, the yankring still pasted the most recently 
    yanked text.  Since the text did not have a newline character
    the 'fou' was inserted after the 'f'.

    Now replace that previous paste with the current element from
    the yankring by pressing <C-N>.  This is the result: >
        one
        two
        three
        four
        one
        five
        three
<   The #1 entry in the yankring is still the line "five@".  When
    choosing the next entry, it wraps around to the last entry in
    the yankring, element #5.  The 'fou' was replaced with 'one^@'.
    Since it had a newline character in it (when it was yanked) the
    newline is included when it is pasted.

                                                 *YRPush-example*     
    Assume you need to paste text from the system clipboard, and this 
    is text you will need routinely.  We can simulate this by running
    this command (see |quote+|): >
        :let @+ = "From the clipboard\n"
        :echo @+

<   With the cursor at the start of the line with the word 'five', press 'p'.
    We still have pasted the 'fou' which is in the default paste buffer. >
        one
        two
        three
        four
        two
        ffouive
        three
<   We have the option of getting the text from the clipboard directly
    with the following. >
        First undo the previous change - u
        Next - "+p
<   The line changes since we bypassed the yankring, and specified
    which register to get the text from: >
        four
        five
        From the clipboard
        three
<   <C-P> replaces this with the #1 entry in the yankring: >
        four
        five
        five
        three
<   Now add the contents of the clipboard to the yankring: >
        :YRPush '+'
<   Move the cursor to the last row 'three' and press 'p'.  The result is: >
        four
        five
        one
        three
        From the clipboard
<   YRPush '+' adds the value of the register '+' to the yankring, but it
    also adds its contents to the default Vim paste buffer.  So pressing
    'p' pasted this text.  Adding a new value to the yankring we have
    repositioned it which you can see with: >
        :YRShow or F11
            --- YankRing ---
            Elem  Content
            1     From the clipboard^@
            2     five^@
            3     four^@
            4     three^@
            5     two^@
            6     one^@
<                                                *YRClear-example*     
    Now we will clear the yankring, and begin over again.  Delete all lines
    from the buffer and replace them with the original rows: >
        one
        two
        three
        four
        five 
<   Now run this command to clear the yankring to start over: >
        :YRClear
<
    Issue a 'yy' on each of the 5 lines.  If you run the YRShow command you
    should see the following: >
        :YRShow or F11
            --- YankRing ---
            Elem  Content
            1     five^@
            2     four^@
            3     three^@
            4     two^@
            5     one^@
<                                                *any-item-example*     
    If you need to quickly browse the yankring to determine which element you
    wish to paste you can simply press 'p' or <CR> on any element displayed in
    the yankring window.  Press '?' for more detailed description of the
    commands available.

    Using the yankring window can be much faster if you do not want to cycle
    through the yankring using <C-P> and <C-N> to find the element.   

                                                 *multiple-items-example*     
    There are times when you need to move through a buffer capturing many
    different lines (or snippets of code) and eventually want to switch 
    buffers and paste these elements.  With some advance planning you can do 
    this without the yankring by issuing commands of the form: >
        "ayy
        "Ayy
<   When specifying the register using UPPERCASE, Vim appends the yanked text
    to register "a, instead of replacing it.  Many times you forget the
    advance planning (or didn't even know about this great feature) you can 
    use the yankring window to do this easily.  If this is the current
    yankring: >
        :YRShow or F11
            --- YankRing ---
            Elem  Content
            1     five^@
            2     four^@
            3     three^@
            4     two^@
            5     one^@
<   The yankring works in |visual-mode|.  To demonstrate move the cursor in
    the buffer to the line with 'two'.  Press 'F11' to display the yankring
    window.  Move the cursor to element 2, press 'V' to enable
    |linewise-visual| mode and then press 'j' twice.  This should have
    visually highlighted elements 2,3,4.  Press 'p' to paste all the
    highlighted elements: >
        one
        two
        four
        three
        two
        three
        four
        five 
<   You can see here it has pasted four, three, two after the second line of
    the buffer.  Now press 'u' to undo our last change.  Leave the cursor
    on the second line 'two'.  Press 'F11' to show the yankring again.
    Visually select the same lines, but this time press 'r' instead of 'p'.
    'r' is for reverse, so it will paste the following: >
        one
        two
        two
        three
        four
        three
        four
        five 
<   
                                                 *YRSearch-example*     
    The default size of the yankring is 100 elements.  It can be
    tedious searching through the yankring to find the element you
    need.  YRSearch is similar to YRShow except it will limit the 
    items displayed to only those items matching the regex provided. >
        :YRShow 
            --- YankRing ---
            Elem  Content
            4     Three Mississippi
            3     Two Mississippi
            2     One Mississippi
            1     @", '\\/.*$^~[]' )
        :YRSearch Mississippi
            --- YankRing ---
            Elem  Content
            4     Three Mississippi
            3     Two Mississippi
            2     One Mississippi
<   Consider some items which require escaping the search string: >
        :YRSearch @", '\\
            --- YankRing ---
            Elem  Content
            1     @", '\\/.*$^~[]' )
<   Forward slashes and various other symbols require escapes, in this
    case the slash was not escaped enough: >
        :YRSearch @", '\\/
            --- YankRing ---
            Elem  Content
<   There are enough escapes this time: >
        :YRSearch @", '\\\\/
            --- YankRing ---
            Elem  Content
            1     @", '\\/.*$^~[]' )
<   Period, star, dollar and so on require one slash: >
        :YRSearch @", '\\\\/\.\*\$\^\~\[\]
            --- YankRing ---
            Elem  Content
            1     @", '\\/.*$^~[]' )
                                                 
<                                                *YRPop-example*     
    You can remove any element from the yankring by pressing pressing 'd' from
    within the yankring window.  Visual mode is also supported to remove more
    than one element at a time.  >
        :YRShow 
            --- YankRing ---
            Elem  Content
            1     four^@
            2     three^@
            3     two^@
            4     one^@
<   Visually select elements 2,3.  Press 'd', the result is: >
        :YRShow 
            --- YankRing ---
            Elem  Content
            1     four^@
            2     one^@

<                                                *yankring-visual-example*     
    There are 3 visual modes and all are supported.  Any visually selected 
    text is added to the yankring.  You can try the various modes.  Move 
    the cursor to inside the buffer (not the yankring window).

    |characterwise-visual|
        Go to line 1, press 'v' and move using the cursor keys until you have
        highlighted some text.  Then press y to yank the visually selected
        area.  Pressing p with paste the yanked region.
    
    |linewise-visual|
        Go to line 2, press 'V' and move using the cursor keys until you have
        highlighted some text.  Notice the entire line is selected (including
        the carriage returns).  Then press y to yank the visually selected
        area.  Pressing p with paste the yanked region.
    
    |blockwise-visual|
        Go to line 3 column 4, press CTRL-V and move to the right using the
        cursor keys until you have highlighted some text.  Then press y to
        yank the visually selected area.  Pressing p with paste the yanked
        region.  Notice the pasted text retained its blockwise visual
        characteristics.
    
                                                 *YRYankRange-example*     
    YRYankRange is called during visual modes, but it is also possible to
    use this via the command line. >
        :1,4YRYankRange
        :3,$YRDeleteRange
        :YRShow 
<   
                                                 *global-example*     
    Using Vim's |:global| command can be very useful at times.  The example
    adds all rows (in a buffer) to the yankring if they have a certain
    phrase: >
        :g/addme/YRYankCount 'yy'
<   This is the breakdown for the above command: >
        :g                  - for each line in the buffer
        /addme              - check if the string "addme" is in the line
        /YRYankCount 'yy'   - Ask the yankring to execute the 'yy' command


==============================================================================
7. History                                       *yankring-history*

  4.0: June 24, 2008: 
         NF: The yankring by default now captures all |text-objects| and 
             all motions (|motion.txt|) which Vim supports.  Version 3.0 only
             supported a subset of the basic motion commands.
         NF: Prior to this version only predefined maps triggered the 
             capture of data into the yankring.  These maps only supported
             yanks and deletes.  The yankring now also supports
             operator-pending mode, which allows a greater range of operations
             to be automatically captured and added to the yankring.  
             Operating pending mode functionality requires Vim 7.2 or Vim 7.1
             with patch #205.  If using Vim 7.1 you can determine this with: 
                echo has("patch205")
         NF: Prior to this version only yanks and deletes were registered
             in the yankring.  Changes are now also captured into the
             yankring.
         NF: The yankring will also capture the system cliboard when focus is
             returned to the vim window.  This is useful if you copy text
             between applications.
         NF: The yankring window always opened bottom horizontal.  Now it
             can be opened top or bottom and horizontal or vertically.
             This can be controlled via variables in your .vimrc.
         BF: The yankring has an option to persist between instances
             of Vim by storing the values in global variables within
             the viminfo.  This has led to some unusual ordering of
             items in the ring from conflicts between instances.
             This option has been turn off by default.
         BF: Their was an issue with yanking using y$.

  3.1: September 10, 2007: 
         NF: YRClear will now unlet all global variables it uses to store
             the data if the persist storage is specified (the default).
             Large values in the viminfo file could possibly affect other
             applications.

  3.0: September 7, 2007: 
         NF: Converted the yankring to use the new Vim7's List object which
             means it is no longer compatible with Vim6.
         NF: By default the yankring will now maintain the yankring's items
             persistently by default.  It does this via the |viminfo| file.
             This means the contents of the yankring rely on the internal
             variables of only 1 Vim instance.
         BF: YRToggle was not unmapping 'gp' and 'gP'.
         BF: YRSearch prompted the user for a regex even if one was provided
             on the command line.
         BF: If g:yankring_manage_numbered_reg is enabled, the "." operator
             did not correctly repeat the previous action (Pedro DeRose).

  2.2: November 1, 2005: 
         NF: Added 'x' to the list of yankring_n_keys.  This is very useful
             in visual mode since it can delete a lot of characters.

  2.2: October 19, 2005: 
         BF: If you pressed '?' to toggle the display of the help in the
             yankring window, the window would close.  This also applied to
             'a', which allowed you to toggle the autoclose feature.

  2.1: October 11, 2005: 
         NF: Added the ability for the yankring to override Vim's numbered 
             registers.  Instead of the numbered registers holding the last
             yanked value, and the 9 previous deletes, they will now reflect
             the top 10 items in the yankring.  This allows you to reference
             them directly with "5p.

  2.0: August 20, 2005: 
         NF: Much improved usability, the yankring now has a "GUI" to service 
             the yankring.  If YRShow or YRSearch is used, a split buffer is
             opened which displays all the elements in the yankring.  There
             are a number of maps that allow you to interact with the
             contents.  The window can be positioned vertically or
             horizontally as well as being sized all through options 
             specified in your vimrc.
	     NF: YRPop can now delete any items from the yankring, rather 
		     that just from the top.
	     NF: YRSetTop has been removed, it is no longer required as the
		     internal representation of the yankring has changed.
	     BF: If g:yankring_ignore_duplicate is set (which is the default)
		     you could get some unpredicable results when moving 
			 backwards and forwards (<C-P> and <C-N>) through the 
			 previous values.
 
  1.7: June 10, 2005: 
         BF: The expression register support added in version 1.6 used
             getreg('='), which has the side effect of executing the 
             expression register.  Depending on what was in the register
             this could have unusual results.  Changed to use histget().
 
  1.6: April 20, 2005: 
         NF: YRSearch is similar to YRGetElem.  Given a regular expression
             it will interactively display all the elements in the yankring
             that match the regular expression.  You can enter the number
             of the element to paste it.  If you have many elements within
             the yankring, this can help you identify them more easily.
         NF: Updated the default history size from 30 to 100, which is 
             partially the reason for the YRSearch command.
         NF: By default it supports "gp" and "gP", in addition to "p" and "P".
         NF: Added support for the expression register (:h quote=).  Here
             is an example of how it is used:
                "="X"<CR>P
 
  1.5: March 30, 2005: 
         NF: The yankring now respects the cpoptions setting, if 'y' is
             included and you press '.', the previous yank command is executed
             and added to the yankring.  You can also add this behaviour by
             setting this in your |vimrc|: >
                let g:yankring_dot_repeat_yank = 1
<        NF: Duplicates will not be added to the yankring by default.  If
             a duplicate is found, the element will be moved to the top
             of the yankring.  This can be controlled by setting this in 
             your |vimrc|: >
                let g:yankring_ignore_duplicate = 0 (1 is default)
<        BF: Regression from version 1.4, the '.' operator may incorrectly
             insert garbage.

  1.4: March 28, 2005: 
         NF: YRToggle has been updated.  If you toggle the yankring off
             (disable) the maps it creates are removed.  Calling YRToggle
             again will recreate the maps.  This truly disables the yankring,
             where the previous version attempted to do this via code.
         BF: Using the '.' operator was not correctly replaying operations
             that did not move text in some way (g~t_) changed the case
             of the text but a '.' did not replay it.
         BF: When replacing previously pasted text the yankring did not
             respect what key was used to paste the text originally.
             All replaced items were pasted using 'p', even if you had
             originally pasted the text with 'P'.

  1.3: March 16, 2005: 
         BF: The '.' operator did not handle the <<, >> shift operator.
             Pressing '.' would result in the previous yankring operation
             instead of repeating the shift.

  1.2: March 14, 2005: 
         NF: Added support for '.' operator to repeat the last change.
         NF: Changed YRGetElem to show the contents of the yankring
             and allow you to choose which element you want pasted.
             It is only interactive if you do not provide a parameter.
         NF: Added 'ygg,dgg' default maps by extending the yankring_n_keys
             variable.

  1.1: March 09, 2005: 
         NF: Added support for the black hole register |quote_|.
         NF: Custom Maps allows the user to more finely tune the yankring
             maps to perform whatever action they require.  This function,
             YRRunAfterMaps(), is run automatically after the yankring 
             creates it's default mappings.  See |yankring-custom-maps|.
         NF: Added some more default maps by extending the yankring_n_keys
             variable.  It now contains:
                yy,dd,yw,dw,ye,de,yE,dE,yiw,diw,yaw,daw,y$,d$,Y,D,yG,dG
             NOTE:  You can easily extend these default mappings by 
             creating this global variable in your |vimrc|, you do not
             have to wait for the plugin to be updated.
         NF: Added support for Dr. Chips GetLatestVimScripts plugin.
         BF: The check for g:yankring_n_keys was incorrect, so it was not
             possible to override the default maps.

  1.0: March 08, 2005: 
         NF: Initial release.

vim: ts=4 ft=help tw=78

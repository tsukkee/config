*neocomplcache.txt*	Ultimate auto completion system for Vim

Version: 2.66
Author : Shougo <Shougo.Matsu@gmail.com>
License: MIT license  {{{
    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:
    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}}}

CONTENTS					*neocomplcache-contents*

Introduction		|neocomplcache-introduction|
Interface		|neocomplcache-interface|
  Commands		  |neocomplcache-commands|
  Variables		  |neocomplcache-variables|
  Key mappings		  |neocomplcache-key-mappings|
Examples		|neocomplcache-examples|
Plugins			|neocomplcache-plugins|
Create plugin		|neocomplcache-create-plugin|
Bugs			|neocomplcache-bugs|
Changelog		|neocomplcache-changelog|

==============================================================================
INTRODUCTION					*neocomplcache-introduction*

*neocomplcache* performs keyword completion by making a cash of keyword in buffer.
Because I implemented it by paying own expenses unlike the keyword completion
including the Vim composing type, neocomplcache can be customized flexibly.
Unfortunately neocomplcache may use more memory than other plugins.

==============================================================================
INTERFACE					*neocomplcache-interface*

------------------------------------------------------------------------------
COMMANDS 					*neocomplcache-commands*

:NeoComplCacheEnable					*:NeoComplCacheEnable*
		Validate neocomplcache and initialize it.
		Warning: Conventional cash disappears.

:NeoComplCacheDisable					*:NeoComplCacheDisable*
		Invalidate neocomplcache and clean it up.

:NeoComplCacheToggle					*:NeoComplCacheToggle*
		Change a lock state of neocomplcache.
		While locking neocomplcache, automatic completion is not possible.

:Neco 							*:Neco*
		Secret.

:NeoComplCacheLock					*:NeoComplCacheLock*
		Lock neocomplcache.
		While locking neocomplcache, manual completion is possible.

:NeoComplCacheUnLock					*:NeoComplCacheUnLock*
		Unlock neocomplcache.

:NeoComplCacheAutoCompletionLength			*:NeoComplCacheAutoCompletionLength*
		Change start length of automatic completion.

:NeoComplCachePartialCompletionLength			*:NeoComplCachePartialCompletionLength*
		Change start length of partial completion.

:NeoComplCacheCachingBuffer [bufnr]			*:NeoComplCacheCachingBuffer*
		Caching [bufnr] buffer.
		Warning: considerably take time, for the big buffer.
		Select current buffer when [bufnr] omitted.
		When [bufnr] buffer is not cashed, perform only simple cashing.

:NeoComplCacheCachingDisable [bufnr]			*:NeoComplCacheCachingDisable*
		Disable [bufnr] buffer's cache.
		The cache will be deleted.
		Select current buffer when [bufnr] omitted.

:NeoComplCacheCachingEnable [bufnr]			*:NeoComplCacheCachingEnable*
		Enable [bufnr] buffer's cache.
		Select current buffer when [bufnr] omitted.

:NeoComplCachePrintSource [bufnr]			*:NeoComplCachePrintSource*
		Output [bufnr] buffer's cache in current buffer.
		This command is for debug.
		Select current buffer when [bufnr] omitted.
		For a command for debugging, a user will not need to use it mainly.

:NeoComplCacheOutputKeyword [bufnr]			*:NeoComplCacheOutputKeyword*
		Write the keyword which cashed [bufnr] buffer in current buffer.
		Select current buffer when [bufnr] omitted.
		When you make a dictionary file by yourself, it may be convenient.

:NeoComplCacheCreateTags [bufnr]			*:NeoComplCacheCreateTags*
		Create tags from [bufnr] buffer.
		Select current buffer when [bufnr] omitted.

:NeoComplCacheEditSnippets [filetype]			*:NeoComplCacheEditSnippets*
		Edit [filetype] snippet.
		Edit current buffer's filetype snippet when [filetype] omitted.
		When there is not [filetype] snippet file, it is generated newly.
		This command edits a snippet file in g:NeoComplCache_SnippetsDir with precedence.
		It is done re-cash automatically when you store a snippet file.

------------------------------------------------------------------------------
VARIABLES 					*neocomplcache-variables*

g:NeoComplCache_EnableAtStartup				*g:NeoComplCache_EnableAtStartup*
		This variable controls whether I validate neocomplcache at the time of Vim start.
		This option should set it in .vimrc.
	
		Because default value is 0, you cannot use neocomplcache unless you validate it by manual operation.

g:NeoComplCache_MaxList					*g:NeoComplCache_MaxList*
		This variable controls the number of candidates displayed in a pop-up menu.
		The case beyond this value is cut down a candidate.
	
		Default value is 100.

g:NeoComplCache_MaxKeywordWidth				*g:NeoComplCache_MaxKeywordWidth*
		This variable controls the indication width of a candidate displayed in a pop-up menu.
		The case beyond this value is cut down properly.
	
		Default value is 50.

g:NeoComplCache_MaxFilenameWidth			*g:NeoComplCache_MaxFilenameWidth*
		This variable controls the indication width of a file name displayed in a pop-up menu.
		The case beyond this value is cut down.
	
		Default value is 15.

g:NeoComplCache_PartialMatch				*g:NeoComplCache_PartialMatch*
		This variable controls whether neocomplcache uses a partial match at the time of completion.
		If it is 1, neocomplcache uses a partial match.
	
		Default value is 1.

g:NeoComplCache_KeywordCompletionStartLength		*g:NeoComplCache_KeywordCompletionStartLength*
		This variable controls the number of the input completioning at the time of key input automatically.
	
		Default value is 2.

g:NeoComplCache_ManualCompletionStartLength		*g:NeoComplCache_ManualCompletionStartLength*
		This variable controls the number of the input completioning at the time of manual completion.
		It is convenient when you reduce this value, but may get heavy
		when you deleted a letter in <C-h> or <BS> at popup indication time.
	
		Default value is 2.

g:NeoComplCache_PartialCompletionStartLength		*g:NeoComplCache_PartialCompletionStartLength*
		This variable controls the number of the partial input matching at the time of completion.
	
		Default value is 4.

g:NeoComplCache_MinKeywordLength			*g:NeoComplCache_MinKeywordLength*
		In a buffer or dictionary files, this variable controls length of keyword becoming
		the object of the completion at the minimum.
	
		Default value is 4.

g:NeoComplCache_MinSyntaxLength				*g:NeoComplCache_MinSyntaxLength*
		In syntax files, this variable controls length of keyword becoming
		the object of the completion at the minimum.
	
		Default value is 4.

g:NeoComplCache_IgnoreCase				*g:NeoComplCache_IgnoreCase*
		When neocomplcache looks for candidate completion, this variable controls
		whether neocomplcache ignores the upper- and lowercase.
		If it is 1, neocomplcache ignores case.
	
		Default value is 1.

g:NeoComplCache_SmartCase				*g:NeoComplCache_SmartCase*
		When a capital letter is included in input, neocomplcache do not ignore the upper- and lowercase.
	
		Default value is 0.

g:NeoComplCache_AlphabeticalOrder			*g:NeoComplCache_AlphabeticalOrder*
		This variable controls whether neocomplcache sort a candidate with alphabetical order.
		A function of neocomplcache is considerably limited when you set this option,
		but the completion processing speeds up.
	
		Default value is 0.

g:NeoComplCache_CacheLineCount				*g:NeoComplCache_CacheLineCount*
		This variable controls whether neocomplcache make a cash every several lines of the buffer.
		The search of the candidate becomes early so that this is small, but takes time to make a cash.
	
		Default value is 70.

g:NeoComplCache_DisableAutoComplete			*g:NeoComplCache_DisableAutoComplete*
		This variable controls whether you invalidate automatic completion.
		If it is 1, automatic completion becomes invalid, but can use
		the manual completion by <C-x><C-u>.
	
		Default value is 0.

g:NeoComplCache_EnableWildCard				*g:NeoComplCache_EnableWildCard*
		This variable controls whether neocomplcache accept wild card character
		such as '*' and '-' for input-saving.
	
		Default value is 1.

g:NeoComplCache_EnableQuickMatch			*g:NeoComplCache_EnableQuickMatch*
		For input-saving, this variable controls whether you can choose a candidate
		with a number displayed beside a candidate.
	
		Default value is 1.

g:NeoComplCache_CalcRankRandomize			*g:NeoComplCache_CalcRankRandomize*
		When neocomplcache calculate frequency again,
		this variable controls whether neocomplcache use a random number.
	
		Default value is has ('reltime').

g:NeoComplCache_QuickMatchMaxLists			*g:NeoComplCache_QuickMatchMaxLists*
		At the time of|g:NeoComplCache_EnableQuickMatch|, this variable controls
		the number of numbers to display beside a candidate.
		Max value is 100.
	
		Default value is 100.

g:NeoComplCache_EnableSkipCompletion			*g:NeoComplCache_EnableSkipCompletion*
		This variable controls whether neocomplcache cancels automatic completion
		when the calculation of the candidate takes too much time.
	
		Default value is has ('reltime').

g:NeoComplCache_SkipCompletionTime			*g:NeoComplCache_SkipCompletionTime*
		This variable defines calculation time to cancel automatic completion by a second unit.
		This optional value must be character string.
	
		Default value is '0.2'.

g:NeoComplCache_SkipInputTime				*g:NeoComplCache_SkipInputTime*
		This variable defines continuation input time to cancel automatic completion by a second unit.
		This optional value must be character string.
	
		Because the default value is '0.0', neocomplcache doesn't cancel completion by the consecutive input.

g:NeoComplCache_PreviousKeywordCompletion		*g:NeoComplCache_PreviousKeywordCompletion*
		This variable controls whether neocomplcache considers not only the appearance frequency of the word
		but also the connection with the word of before and perform the equal thing substitute of the candidate.
	
		Default value is 1.

g:NeoComplCache_TagsAutoUpdate				*g:NeoComplCache_TagsAutoUpdate*
		At the time of the save of the buffer, this variable controls
		whether neocomplcache updates it automatically if there is a tag file.
		It is convenient for tag completion and Omni completion to use a tag file for inside.
	
		Default value is 0.

g:NeoComplCache_TryFilenameCompletion			*g:NeoComplCache_TryFilenameCompletion*
		When you input character string to become the file path,
		this variable controls whether neocomplcache perform filename completion.
	
		Default value is 1.

g:NeoComplCache_EnableInfo				*g:NeoComplCache_EnableInfo*
		When a preview window opens, this variable controls whether neocomplcache display additional information.
		Only tags_complete plugin supports now.
		This variable changes 'completeopt'.
	
		Default value is 0.

g:NeoComplCache_CachingRandomize			*g:NeoComplCache_CachingRandomize*
		This variable controls whether neocomplcache uses a random number caching when Vim come out of Insert mode.
	
		Default value is has ('reltime').

g:NeoComplCache_EnableCamelCaseCompletion		*g:NeoComplCache_EnableCamelCaseCompletion*
		When you input a capital letter, this variable controls
		whether neocomplcache takes an ambiguous searching as an end of the words in it.
		For example, neocomplcache come to match it with ArgumentsException when you input it with AE.
	
		Default value is 0.

g:NeoComplCache_EnableUnderbarCompletion		*g:NeoComplCache_EnableUnderbarCompletion*
		When you input _, this variable controls
		whether neocomplcache takes an ambiguous searching as an end of the words in it.
		For example, neocomplcache come to match it with 'public_html' when you input it with 'p_h'.
	
		Default value is 0.

g:NeoComplCache_FilenameCompletionSkipItems		*g:NeoComplCache_FilenameCompletionSkipItems*
		When neocomplcache complete filename automatically,
		this variable controls the number of the skipping candidates.
		The automatic completion is skipped if candidates are more than this number.
	
		Default value is 100.

g:NeoComplCache_CachingLimitFileSize			*g:NeoComplCache_CachingLimitFileSize*
		This variable set file size to make a cash of a file.
		If open file is bigger than this size, neocomplcache do not make a cash.
	
		Default value is 1000000.

g:NeoComplCache_CachingDisablePattern			*g:NeoComplCache_CachingDisablePattern*
		This variable set a pattern of the buffer name which does not make a cash of a buffer in regular expression.
		When it is an empty character string, it becomes invalid.
	
		Default value is ''.

g:NeoComplCache_SnippetsDir				*g:NeoComplCache_SnippetsDir*
		This variable appoints the pass of the snippet files which user defined.
		It cuts the directory by plural appointment in comma separated value.
		When there is not the directory which appointed here, neocomplcache will ignore.
		User defined snippet files are read after having read a normal snippet files.
		It is overwritten redundant snippet.
	
		There is not this variable unless a user defines it by oneself.

g:NeoComplCache_TemporaryDir				*g:NeoComplCache_TemporaryDir*
		This variable appoints the directory that neocomplcache begins to write a file at one time.
		When there is not the directory which appointed here, it is made.
		For example, keyword_complete.vim stores cash of the keyword in this 'keyword_cache' sub directory.
	
		Default value is '~/.neocon'.

g:NeoComplCache_KeywordPatterns				*g:NeoComplCache_KeywordPatterns*
		This dictionary records keyword patterns to completion.
		This is appointed in regular expression every file type.
		When you customize it, you must use '\v' for the top of the pattern.
	
		Because it is complicated, refer to autoload/neocomplcache.vim for the initial value.

g:NeoComplCache_OmniPatterns				*g:NeoComplCache_OmniPatterns*
		This dictionary records keyword patterns to Omni completion.
		This is appointed in regular expression every file type.
		When you customize it, you must use '\v' for the top of the pattern.
	
		Because it is complicated, refer to autoload/neocomplcache.vim for the initial value.

g:NeoComplCache_SameFileTypeLists			*g:NeoComplCache_SameFileTypeLists*
		It is a dictionary to connect file type mutually.
		It is effective at time to let you refer to c and cpp mutually.
	
		Because it is complicated, refer to autoload/neocomplcache.vim for the initial value.

g:NeoComplCache_NonBufferFileTypeDetect			*g:NeoComplCache_NonBufferFileTypeDetect*
		It is a dictionary to connect file type with extension.
		When neocomplcache cannot judge file type well, dictionary files are effective.
	
		Because it is complicated, refer to autoload/neocomplcache.vim for the initial value.

g:NeoComplCache_DictionaryFileTypeLists			*g:NeoComplCache_DictionaryFileTypeLists*
		It is a dictionary to connect a dictionary file with file type.
		The dictionary's key is filetype and value is a path to a dictionary file.
	
		Default value is ''.

------------------------------------------------------------------------------
KEY MAPPINGS 					*neocomplcache-key-mappings*

<Plug>(neocomplcache_keyword_caching)				*<Plug>(neocomplcache_keyword_caching)*
		make a cash of a current cash line.

<Plug>(neocomplcache_snippets_expand)				*<Plug>(neocomplcache_snippets_expand)*
		Expand a snippet of plural lines. Perform the disposal of place holders.
		The snippet which unfolded is easy to become display by the high rank so that a rank rises.

neocomplcache#manual_filename_complete				*neocomplcache#manual_filename_complete*
		Use this function on inoremap <expr>.
		The keymapping call file name completion of neocomplcache.
		When you rearrange the file name completion of the Vim standard, you use it.
>
		inoremap <expr><C-x><C-f>  neocomplcache#manual_filename_complete()
<
neocomplcache#close_popup				*neocomplcache#close_popup*
		Use this function on inoremap <expr>.
		Close popup of neocomplcache and finish completion.
		You can close popup more surely than <C-y> of the Vim standard.
		The rank of the candidate whom you chose rises when you close popup with this function.
>
		inoremap <expr><C-y>  pumvisible() ? neocomplcache#close_popup() :  "\<C-y>"
<
neocomplcache#cancel_popup				*neocomplcache#cancel_popup*
		Use this function on inoremap <expr>.  Cansel completion.
		You can close popup more surely than <C-e> of the Vim standard.
>
		inoremap <expr><C-e>  pumvisible() ? neocomplcache#cancel_popup() : "\<C-e>"
<
==============================================================================
EXAMPLES					*neocomplcache-examples*
>
	" Don't use autocomplpop.
	let g:AutoComplPop_NotEnableAtStartup = 1
	" Use neocomplcache.
	let g:NeoComplCache_EnableAtStartup = 1
	" Use smartcase.
	let g:NeoComplCache_SmartCase = 1
	" Use previous keyword completion.
	let g:NeoComplCache_PreviousKeywordCompletion = 1
	" Use preview window.
	let g:NeoComplCache_EnableInfo = 1
	" Use camel case completion.
	let g:NeoComplCache_EnableCamelCaseCompletion = 1
	" Use underbar completion.
	let g:NeoComplCache_EnableUnderbarCompletion = 1
	" Set minimum syntax keyword length.
	let g:NeoComplCache_MinSyntaxLength = 3
	" Set skip input time.
	let g:NeoComplCache_SkipInputTime = '0.1'

	" Define dictionary.
	let g:NeoComplCache_DictionaryFileTypeLists = {
	    \ 'default' : '',
	    \ 'vimshell' : $HOME.'/.vimshell_hist',
	    \ 'scheme' : $HOME.'/.gosh_completions'
	        \ }

	" Define keyword.
	if !exists('g:NeoComplCache_KeywordPatterns')
	    let g:NeoComplCache_KeywordPatterns = {}
	endif
	let g:NeoComplCache_KeywordPatterns['default'] = '\v\h\w*'

	" Plugin key-mappings.
	imap <silent><C-l>     <Plug>(neocomplcache_snippets_expand)
	smap <silent><C-l>     <Plug>(neocomplcache_snippets_expand)
	nmap <silent><C-e>     <Plug>(neocomplcache_keyword_caching)
	imap <expr><silent><C-e>     pumvisible() ? "\<C-e>" : "\<Plug>(neocomplcache_keyword_caching)"
	inoremap <expr><C-h> pumvisible() ? "\<C-y>\<C-h>" : "\<C-h>"
<
==============================================================================
PLUGINS					*neocomplcache-plugins*

In this clause, I comment on plug in attached to neocomplcache.
Neocomplcache reads automatically the plugin saved in an autoload/neocomplcache directory.

keyword_complete.vim					*keyword_complete*
		This plugin will collect keywords from buffers and dictionaries, and to use for completion.
		Because the plugin offer the basic function of neocomplcache,
		neocomplcache does not work normally when you delete this plugin.

snippets_complete.vim					*snippets_complete*
		This plugin will use snippet files for completion.
		The plugin offer a function similar with snipMate.vim and snippetsEmu.vim.
		Because you can search a snippet with a function of neocomplcache,
		you may omit trouble to learn.

tags_complete.vim					*tags_complete*
		This plugin will use a tag file defined in 'tags' for completion.
		Because the plugin is slow if a tag file is big, I work only by manual completion.
		If NeoComplCache_EnableInfo is 1, the plugin will display the additional information.

syntax_complete.vim					*syntax_complete*
		This plugin will analyze a syntax file like autoload/syntaxcomplete.vim offered by default,
		and to add to candidate completion.
		The plugin can recognize candidates a lot more than autoload/syntaxcomplete.vim.

==============================================================================
BUGS						*neocomplcache-bugs*

==============================================================================
CREATE PLUGIN					*neocomplcache-create-plugin*

In this clause, I comment on a method to make plugin of neocomplcache.
The ability of neocomplcache will spread by creating plugin by yourself.

==============================================================================
CHANGELOG					*neocomplcache-changelog*

Because there is much quantity, refer to plugin/neocomplcache.vim.

==============================================================================
vim:tw=78:ts=8:ft=help:norl:fen:fdl=0:fdm=marker:

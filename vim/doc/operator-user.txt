*operator-user.txt*	Define your own operator easily

Version 0.0.2
Script ID: 2692
Copyright (C) 2009 kana <http://whileimautomaton.net/>
License: MIT license  {{{
    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:

    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}}}

CONTENTS					*operator-user-contents*

Introduction		|operator-user-introduction|
Interface		|operator-user-interface|
  Functions		  |operator-user-functions|
Examples		|operator-user-examples|
Bugs			|operator-user-bugs|
Changelog		|operator-user-changelog|




==============================================================================
INTRODUCTION					*operator-user-introduction*

*operator-user* is a Vim library plugin to provide an easy way to define your
own |operator|.  Though there are several pitfalls to define operators, you
don't have to take care of them with |operator#user#define()| which are
provided by this library plugin.

For example, the following setting defines operator "_" to adjust the height
of the current window to the same as the target range:
>
	call operator#user#define('_', 'Op_adjust_window_height')
	function! Op_adjust_window_height(motion_wiseness)
	  execute (line("']") - line("'[") + 1) 'wincmd' '_'
	  normal! `[zt
	endfunction
<
You can use this operator as follows:

	10__	Adjust to 10 lines and show the current line at the top.
	_ip	Adjust to the same height of the paragraph under the cursor.

This operator is useful to adjust the visible content in the current window.

See also |operator-user-exmaples| for more examples and explanations.


Requirements:
- Vim 7.2 or later

Latest version:
http://github.com/kana/config/commits/vim-operator-user

Document in HTML format:
http://kana.github.com/config/vim/operator-user.html




==============================================================================
INTERFACE					*operator-user-interface*

------------------------------------------------------------------------------
FUNCTIONS					*operator-user-functions*

						*operator#user#define()*
operator#user#define({lhs}, {function}, [{extra} ...])
			Define a new operator.

			{lhs}		(string)
				A key sequence to execute the operator.

				In Normal mode and Visual mode, {lhs} is
				mapped to a magic stuff to execute the
				operator.

				In Operator-pending mode, {lhs} is mapped to
				|g@| to operate linewise like |cc|, |dd|, etc.

			{function}	(string)
				The name of a function to be called whenever
				the operator is executed.

			{extra}		(string)
				An arbitrary Ex command to be executed after
				setting 'operatorfunc' and before executing
				the operator.

				If multiple {extra}s are given, they are
				joined together into one string.  A whitespace
				is put in between them.  Then the string will
				be used instead.

				See also |operator-user-examples| how to use.

					   *operator#user#define_ex_command()*
operator#user#define_ex_command({lhs}, {ex-command})
			Define an operator-version of {ex-command}.

			{lhs}		(string)
				Same as the one for |operator#user#define()|.

			{ex-command}	(string)
				An Ex command to be executed whenever the
				operator is executed.  Range must not be
				included.

				This argument is used as follows:
>
					'[,']{ex-command}
<




==============================================================================
EXAMPLES					*operator-user-examples*

(A) The following setting defines operator-version of |:right|:
>
	call operator#user#define('L', 'Op_command_right')
	function! Op_command_right(motion_wiseness)
	  '[,']right
	endfunction
<

(B) The following setting defines a generic version of (A).
    This is also an example to use {extra} for |operator#user#define()|:
>
	call operator#user#define('H', 'Op_command',
	\                         'call Set_op_command("left")')
	call operator#user#define('L', 'Op_command',
	\                         'call Set_op_command("right")')
	call operator#user#define('M', 'Op_command',
	\                         'call Set_op_command("center")')

	let s:op_command_command = ''

	function! Set_op_command(command)
	  let s:op_command_command = a:command
	endfunction

	function! Op_command(motion_wiseness)
	  execute "'[,']" s:op_command_command
	endfunction
<

(C) With |operator#user#define_ex_command()|, the example (B) can be
    simplified as follows:
>
	call operator#user#define_ex_command('H', 'left')
	call operator#user#define_ex_command('L', 'right')
	call operator#user#define_ex_command('M', 'center')
<




==============================================================================
BUGS						*operator-user-bugs*

						*operator-user-bugs-A*
(A) |operator#user#define()| defines a key mapping "{lhs} to |g@|" in
    Operator-pending mode to select text linewise like |cc|, |dd|, etc.
    But this behavior may be harmful in some cases:

    (a) If you define two operators "A" and "B", you can operate the cursor
	line with "AA" and "BB".  But you can ALSO operate the cursor line
	with "AB" and "BA".  These "{operator-A}{operator-B}" key combinations
	are not expected to work as if "{operator-A}{operator-A}", because
	there is no such default key binding.

    (b) If you already define {lhs} to something in Operator-pending mode,
        |operator#user#define()| always overrides the key mapping.

    To avoid these problems, define "named" key sequences first, then map
    something that you want to type to them.  For example:
>
	call operator#user#define('<Plug>(operator-A)', 'OperatorFunctionA')
	nmap A  <Plug>(operator-A)
	vmap A  <Plug>(operator-A)
<
    See also the following article for the details.
    The article is also useful if you want to write your own plulgin:
    ``Vim: Plugins should provide "named" key sequences to customize hotkeys,
    not variables'' <http://whileimautomaton.net/2008/09/27/02/27/35/diary>

						*operator-user-bugs-B*
(B) In Visual mode, any operator defined by |operator#user#define()| cannot
    handle |count| correctly.  It acts as if count is not given.




==============================================================================
CHANGELOG					*operator-user-changelog*

0.0.2	2009-09-04T05:58:28+09:00	       *operator-user-changelog-0.0.2*
	- Add |operator#user#define_ex_command()|.
	- Add a note on a bug.  See |operator-user-bugs-B| for the details.
	- Remove :DefineOperator.  It's useless as a part of this library.

0.0.1	2009-07-18T04:41:22+09:00	       *operator-user-changelog-0.0.1*
	- Rename as "operator-user".  The old name "myoperator" is not good
	  for further works.

0.0.0	2009-06-26T02:51:29+09:00	       *operator-user-changelog-0.0.0*
	- Initial version.




==============================================================================
vim:tw=78:ts=8:ft=help:norl:fen:fdl=0:fdm=marker:

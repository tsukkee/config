*quickrun.txt*	コマンドを素早く実行します。

Version: 0.4.1
Author : thinca <thinca+vim@gmail.com>
License: クリエイティブ・コモンズの表示 2.1 日本ライセンス
         <http://creativecommons.org/licenses/by/2.1/jp/>

==============================================================================
目次						*quickrun-contents*

概要				|quickrun-introduction|
インターフェース		|quickrun-interface|
  コマンド			  |quickrun-commands|
  キーマッピング		  |quickrun-keymappings|
オプション			|quickrun-options|
  オプション値の展開		  |quickrun-expand-option|
  exec オプションの書式		  |quickrun-exec-format|
TODO				|quickrun-TODO|
更新履歴			|quickrun-changelog|



==============================================================================
概要						*quickrun-introduction*

*quickrun* は編集中のファイルの全体もしくは一部を実行する Vim プラグインです。
実行するためのコマンド |:QuickRun| が提供されます。

要件:
- Vim 7.2 以降

						*quickrun-synopsis*
>
	" 現在のバッファを実行
	:QuickRun

	" 現在のバッファの3行目から6行目までを実行
	:3,6QuickRun

	" 現在のバッファを perl プログラムとして実行
	:QuickRun perl

	" ruby プログラムとしてソースとなる文字列を指定して実行
	:QuickRun ruby -src 'puts "Hello, world!"'


	" (vimrc にて) haskell を実行するプログラムのデフォルトを hugs にする
	let g:quickrun_config = {}
	let g:quickrun_config.haskell = {'command' : 'runhugs'}

	" ショートカットキーを設定する
	for [key, com] in items({
	\   '<Leader>x' : '>:',
	\   '<Leader>p' : '>!',
	\   '<Leader>w' : '>',
	\   '<Leader>q' : '>>',
	\ })
		execute 'nnoremap <silent>' key ':QuickRun' com '-mode n<CR>'
		execute 'vnoremap <silent>' key ':QuickRun' com '-mode v<CR>'
	endfor
<


==============================================================================
インターフェース				*quickrun-interface*

------------------------------------------------------------------------------
コマンド					*quickrun-commands*

						*:QuickRun*
:[range]QuickRun [{type}] [<{input}] [>[>][{output}]] [-option value]...
	プログラムを実行します。実行する際にオプションを指定できます。指定でき
	るオプションについては |quickrun-options| を参照してください。
	オプションは名前と値の組で、
>
	-オプション名 値
<
	で指定します。必要な数だけ指定できます。全てのオプションは順不同です。
	値に空白文字を含む場合、シングルクォートかタブルクォートでくくることで
	指定できます。更に内側にシングルクォートかダブルクォートを含めたい場合
	は、バックスラッシュでエスケープしてください。

	{type} は、-type {type} の省略形です。
	<{input} は、-input {input} の省略形です。
	>{output} は、-output {output} の省略形です。
	>>{output} は、-append 1 -output {output} の省略形です。

	range に実行する範囲を指定します。指定しなかった場合はファイル全体を指
	定したことになります。'<,'>を指定して mode オプション
	(|quickrun-option-mode|)を指定しなかった場合はビジュアル選択された部分
	が対象になります。この場合矩形選択なども有効です。ただし、キーマッピン
	グからコマンドを実行する場合はビジュアルモードかどうか自動で判断できな
	いのでキーマッピング内で mode オプションを指定して実行するようにしてく
	ださい。


------------------------------------------------------------------------------
関数				*quickrun-functions* *quickrun-operator*

QuickRun({type})				*QuickRun()*
			'operatorfunc' に対して設定するための関数です。
			例えば、 >
		nnoremap <silent> <C-CR> :<C-u>set opfunc=QuickRun<CR>g@ip
<			これは、<C-CR> で現在の段落(|ip|)を実行します。


------------------------------------------------------------------------------
キーマッピング					*quickrun-keymappings*

<Plug>(quickrun-op)				*<Plug>(quickrun-op)*
			続くモーションの範囲を実行します。これは
			'operatorfunc' の値を "QuickRun" に変更します。

<Plug>(quickrun)				*<Plug>(quickrun)*
			現在のバッファに適したコマンドを実行して結果を別ウィン
			ドウに表示します。
			これは単純に |:QuickRun| コマンドを引数なしで実行する
			のと同じです。
<

					*g:quickrun_no_default_key_mappings*
以下のキーマッピングは、既に定義されていたり
g:quickrun_no_default_key_mappings に 1 が設定されていると定義されません。

{lhs}			{rhs}
--------		-----------------------------
<Leader>r		<Plug>(quickrun)



==============================================================================
オプション					*quickrun-options*
コマンドラインで指定するオプションのリストです。省略したオプションは
|g:quickrun_config| で設定しているものが使用されます。(*) が付いているものにつ
いては |quickrun-expand-option| を参照してください。

type					*quickrun-option-type*
			設定の雛形を指定します。デフォルトで 'filetype' の値が
			使用されます。詳細は |g:quickrun_config| を参照してくだ
			さい。

exec (*)				*quickrun-option-exec*
			実行するコマンドの書式を指定します。詳細は
			|quickrun-exec-format| を参照してください。複数の値を
			指定することも可能です。

command					*quickrun-option-command*
			exec 内の %c に展開される文字列です。指定されなかった
			場合は、type と同じ値が使用されます。

src					*quickrun-option-src*
			実行するプログラムのソースとなる文字列を指定します。デ
			フォルトでは編集中のファイル全体ですが、指定することで
			変更が可能です。

args					*quickrun-option-args*
			exec の %a に展開される文字列です。

input (*)				*quickrun-option-input*
			標準入力に流し込むファイルを指定します。先頭が = で始
			まっていた場合、それ以降の文字列を入力として扱います。
			この場合のみ文字列は |quickrun-expand-option| で展開さ
			れます。

output					*quickrun-option-output*
			結果の出力方法を指定します。
			- 空文字列を指定すると、出力専用バッファを開いてそこへ
			  出力します。このバッファは同じものが再利用されます。
			  また、このバッファにはカスタマイズのために
			  'filetype' に "quickrun" が設定されます。
			- ! を指定すると、シェルで直接実行します。
			- : を指定すると、|hit-enter-prompt| に出力します。
			  append を有効にした場合、|message-history| に記録し
			  ます。
			- ={var} を指定すると、{var} に指定した変数、オプショ
			  ン、環境変数へ出力します。
			- _ を指定すると、出力をしません。
			- それ以外の場合はファイルに出力します。

append					*quickrun-option-append*
			0 以外が指定された場合、(可能ならば)出力先に対して追記
			します。

runmode					*quickrun-option-runmode*
			実行モードを指定します。以下のうちのいずれかを指定しま
			す。
			- "simple"
			  単純に |system()| や |:!|(output が ":" の場合) を
			  使って実行します。デフォルトではこのモードです。
			- "async:remote"
			  {|+clientserver| が必要}
			  コマンドをバックグラウンドで実行し、終了を
			  |+clientserver| 機能を利用して通知し結果を表示します。
			  |v:servername| が設定されている必要があります。ない
			  場合は、|--servername| オプションを使って Vim を起動
			  してください。
			  バックグラウンドで実行するため、コマンドが無限ループ
			  や入力待ち等で終了しない場合、Vim から制御することは
			  できないので注意してください。
			- "async:remote:vimproc"
			  {|vimproc| が必要}
			  コマンドの実行に |vimproc| を使います。すでにこの
			  モードでコマンドが実行されている最中に新しくコマンド
			  を実行しようとした場合、古いコマンドは強制的にキャン
			  セルされます。
			  |vimproc| がインストールされていない場合は通常と同じ
			  ように実行します。

split (*)				*quickrun-option-split*
			出力専用バッファを開く際の補助コマンドを指定します。バ
			ッファを開く際に |:split| コマンドの前に挿入されます。
			|:tab| も指定できますが、タブページ内に出力専用バッフ
			ァが存在しない場合常に新しく開くのでおすすめしません。
			デフォルトは
			'{winwidth(0) * 2 < winheight(0) * 5 ? "" : "vertical"}'
			です。

into					*quickrun-option-into*
			0 以外を指定すると、結果が出た際に出力専用バッファへ
			カーソルを移動します。

mode					*quickrun-option-mode*
			実行モードです。n,v,o のいずれかを指定します。これは範
			囲をどのように取得するかに影響します。ただし、多くの場
			合は自動で設定されるので必要ありません。
			キーマッピングからコマンド全体を入力する場合に指定が必
			要です。
			例: >
				nnoremap <silent> <F5> :QuickRun -mode n<CR>
				vnoremap <silent> <F5> :QuickRun -mode v<CR>

output_encode (*)			*quickrun-option-output_encode*
			出力の文字コードを変換したい場合に、 "from:to" の形式
			で指定します。
			デフォルトは "&fenc:&enc" です。

shebang					*quickrun-option-shebang*
			0 以外を指定すると、 src の最初の行が #! で始まってた
			場合にその後続の文字列を command として扱います。
			デフォルトは 1 です。

tempfile (*)				*quickrun-option-tempfile*
			ブログラムを実行する際、現在のバッファ全体を実行する以
			外の場合は、ソースファイルを一時ファイルに書き出して実
			行します。その際の一時ファイル名を指定します。
			一時ファイルは実行する度に削除されます。
			デフォルトは "{tempname()}" です。

shellcmd				*quickrun-option-shellcmd*
			output が ! の時に実行する Vim コマンドのテンプレート
			です。%s が exec オプションで生成されたコマンドに置換
			されます。
			デフォルトは MS Windows の場合は
			'silent !"%s" & pause' それ以外の場合は '!%s' です。

eval					*quickrun-option-eval*
			*** 実験的な機能 ***
			0 以外が指定された場合、src を eval_template に埋め込
			んで置き変えます。

eval_template				*quickrun-option-eval_template*
			*** 実験的な機能 ***
			eval が指定された際に使用されるテンプレート文字列で
			す。テンプレート内の %s が src に置き変えられます。

running_mark (*)			*quickrun-option-running_mark*
			この値が空文字列でない場合、実行中にこの文字列が出力先
			に表示されます。表示は実行完了後に削除されます。
			デフォルトは ":-)" です。


------------------------------------------------------------------------------
オプション値の展開				*quickrun-expand-option*

いくつかの設定は、実行時に中身の一部が置換されます。(*) がついている設定は、
@,&,$で始まる単語をそれぞれレジスタ、オプション、環境変数として展開します。曖
昧さを避ける為、単語を{}で囲っても良いです。
例: >
	@a
	&{fileencoding}
	$PATH
	{expr}
{}を使用すると中身は |eval()| によって評価されます。展開を避けたい場合は、展開
される部分を \ でエスケープしてください。


------------------------------------------------------------------------------
exec オプションの書式				*quickrun-exec-format*

実際に実行するコマンドのフォーマットを指定します。フォーマットには以下のシンボ
ルが使えます。同じシンボルを複数指定することも可能です。

シンボル	展開値 ~
--------        ------
%%		%自身
%c		コマンド
%s		ソースファイル
%S		ソースファイル(エスケープなし)
%a		スクリプトの引数

ファイルを指定するシンボルには、|filename-modifiers| が使えます。
>
	java %S:r:gs?[/\\]?.?
<
また、ファイルを指定するシンボルは |shellescape()| でエスケープされます。
コマンドに改行文字が含まれている場合は空白文字に置き換えられます。

Vim のコマンドを実行する
------------------------
exec を展開した結果先頭の文字が ":" だった場合、Vim のコマンドとして実行されま
す。また、この場合ファイルを指定するシンボルは |fnameescape()| でエスケープさ
れます。

複数のコマンドを指定する
------------------------
|:QuickRun| コマンドに exec オプションを複数回指定したり、 |g:quickrun_config|
の exec にリストを指定した場合、先頭から順に実行します。コンパイルや後始末が必
要な場合に便利です。



==============================================================================
設定					*quickrun-settings* *g:quickrun_config*

グローバル変数 |g:quickrun_config| を使って各オプションのデフォルト値を設定で
きます。
デフォルト値はオプション名をキーとした辞書で指定します。|g:quickrun_config| に
は {type} をキー、デフォルト値を値にした辞書を指定します。つまり、この変数には
二層構造の辞書を指定します。
{type} はコマンドラインから |quickrun-option-type| で指定される値です。未指定の
場合は 'filetype' が使用されます。
特殊なタイプ名 '*' には全ての {type} のデフォルト値を指定できます。

全体共通の設定よりタイプ毎の設定が、タイプ毎の設定よりコマンドで指定された引数
が優先されます。

|g:quickrun_config| のデフォルト値はプラグインのロード時に自動的に構築されま
す。その際に (.vimrc などで) すでに定義されていた場合は、デフォルト値に既存値
を上書きする形で初期化されます。

標準の設定					*g:quickrun_default_config*
----------
|g:quickrun_default_config| には標準的なデフォルトの設定が入っています。これ
は |g:quickrun_config| と同じ構造になっています。
|quickrun-options| に記載されているデフォルト値は実際にはこの変数のデフォルト
値です。通常はユーザがこの値を操作する必要はありません。

バッファローカルな設定				*b:quickrun_config*
----------------------
|b:quickrun_config| を使ってバッファローカルな設定を追加できます。これには
|g:quickrun_config| とは違い、デフォルト値を直接指定します。
この値はコマンドライン引数の次に優先されます。

以上をまとめると、コマンド実行時の各オプションの値は以下の優先順位で決定しま
す。

1. コマンドラインで指定された値
2. |b:quickrun_config|
3. |g:quickrun_config| の {type}
4. |g:quickrun_default_config| の {type}
5. |g:quickrun_config| の '*'
6. |g:quickrun_default_config| の '*'

1 や 2 で {type} を設定しておくことで 3 で通常とは別の {type} を参照できます。



==============================================================================
TODO						*quickrun-TODO*

9 エラー処理見直し
6 直前の結果を出力する(消えてしまったものをもう一度見たいときのため)
5 args 複数指定
3 出力形式の追加(置換)
1 標準エラー出力対応?



==============================================================================
更新履歴					*quickrun-changelog*

0.4.1	2010-02-25
	- 結果のファイルへの書き出しのファイル名が 1 文字になるバグを修正。
	- java のデフォルト値を改善。
	- 結果取得用の一時ファイルが消えないことがあるバグを修正。
	- コマンドラインの補完関数を改善。
	- |quickrun-option-output| に指定できる値に _ を追加。
	- |quickrun-option-running_mark| を |quickrun-expand-option| で展開す
	  るようにした。

0.4.0	2010-02-12
	- |g:quickrun_default_config| を追加。
	- デフォルトの設定に llvm を追加。
	- コマンドに改行が含まれているとうまく実行できないバグを修正。
	- 出力専用バッファをデフォルトで q で閉じるようにした。
	- |quickrun-option-runmode| オプションを追加。
	- |quickrun-option-into| オプションを追加。
	- autoload 化。

0.3.3	2009-12-16
	- マルチバイト文字を含むコマンドの実行がうまくいかないバグを修正。

0.3.2	2009-12-10
	- eval がうまく動かないことがあるバグを修正。
	- |g:quickrun_config| の go のデフォルト値を改善。
	- ドキュメントの不備を修正。

0.3.1	2009-11-16
	- |g:quickrun_config| のデフォルト値を変更。
	  - '*' に output append args を含めた。
	  - java, scala, perl を改善。
	  - go を追加。
	- shebang が利用できるかの判定で、コマンドが実行可能かのチェックをしな
	  いようにした。
	- 内部構造を若干変更。

0.3.0	2009-11-01
	- 実行中にバッファに一時的な文字列を表示する機能
	  (|quickrun-option-running_mark|) を追加。

0.2.0	2009-11-01
	- バッファローカルな設定を行う機能 (|b:quickrun_config|) を追加。
	- |quicklaunch| のヘルプを分離。

0.1.0	2009-09-28
	- デフォルトのキーマッピングを追加。
	- quicklaunch.vim を追加。
	- 引数のパース方法を変更。

0.0.6	2009-09-02
	- %s が複数回評価されるバグを修正。
	- 無名レジスタのタイプが変更されるバグを修正。
	- 出力専用バッファに出力する際、スクロールを調整するようにした。

0.0.5	2009-07-31
	- プラグイン名を小文字に変更。
	- eval 機能を実験的に追加。
	  - eval オプション (|quickrun-option-eval|) を追加。
	  - eval_template オプション (|quickrun-option-eval_template|) を追加。

0.0.4	2009-07-30
	- 引数なしで実行した場合、filetype が認識されないバグを修正。
	- shellcmd オプション (|quickrun-option-shellcmd|) を追加。
	- ファイルに対して出力する機能を追加。

0.0.3	2009-06-12
	- |g:quickrun_config| の初期化がうまくいかないバグを修正。
	- |quickrun-option-split| の初期値を変更。
	- コマンドから |quickrun-option-exec| を複数指定できるようにした。

0.0.2	2009-06-10
	- 引数の処理方法を変更。
	- <{input} が動かないバグを修正。
	- オプションの展開処理を改善。
	- 出力専用バッファの開き方を制御する "split" オプションを追加。
	- "type" オプションの値が |g:quickrun_config| になくても動くように修正。

0.0.1	2009-06-01
	- 初版。


==============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
